<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="default.xsl"?>
<fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="true"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>303</fr:anchor><fr:addr
type="machine">#255</fr:addr><fr:route>unstable-255.xml</fr:route><fr:title
text="Diary: Cyclic tree opfibrations › Unfoldings in the literature › Wehr's infinite unfolding"><fr:link
type="local"
href="unstable-254.xml"
addr="#254"
title="Diary: Cyclic tree opfibrations › Unfoldings in the literature"><fr:link
type="local"
href="dia-0006.xml"
addr="dia-0006"
title="Diary: Cyclic tree opfibrations">Diary: Cyclic tree opfibrations</fr:link> › Unfoldings in the literature</fr:link> › Wehr's infinite unfolding</fr:title><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>6</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="chrisjpurdy.xml"
addr="chrisjpurdy"
title="Chris Purdy">Chris Purdy</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p>Wehr's notion of unfolding in his MSc thesis concerns the unfolding of a cyclic proof into its unique infinite unfolding. We need to be able to consider unfoldings of a cyclic proof into other finite presentations of the same infinite proof.</fr:p></fr:mainmatter><fr:backmatter><fr:tree
toc="false"
numbered="false"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:title
text="Context">Context</fr:title><fr:authors /></fr:frontmatter><fr:mainmatter><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="true"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>305</fr:anchor><fr:addr
type="user">dia-0006</fr:addr><fr:route>dia-0006.xml</fr:route><fr:title
text="Diary: Cyclic tree opfibrations">Diary: Cyclic tree opfibrations</fr:title><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>6</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="chrisjpurdy.xml"
addr="chrisjpurdy"
title="Chris Purdy">Chris Purdy</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p><fr:link
type="local"
href="dia-0005.xml"
addr="dia-0005"
title="Diary: Natural deduction-style unfold rule for -formulae">Previous entry</fr:link>, <fr:link
type="external"
href="dia-0007">Next entry</fr:link></fr:p><fr:p>I'm compiling some ideas I had in October/November last year about different notions of maps between cyclic trees.</fr:p><fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>265</fr:anchor><fr:addr
type="user">cyt-0001</fr:addr><fr:route>cyt-0001.xml</fr:route><fr:title
text="Cyclic tree">Cyclic tree</fr:title><fr:taxon>Definition</fr:taxon><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>5</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="chrisjpurdy.xml"
addr="chrisjpurdy"
title="Chris Purdy">Chris Purdy</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p>A cyclic tree is a tuple <fr:tex
display="inline"><![CDATA[(T , \delta )]]></fr:tex> of a tree <fr:tex
display="inline"><![CDATA[T]]></fr:tex> on <fr:tex
display="inline"><![CDATA[X]]></fr:tex> (a finite non-empty prefix-closed subset of <fr:tex
display="inline"><![CDATA[X^*]]></fr:tex>) and a partial function <fr:tex
display="inline"><![CDATA[\delta  : \text {Leaf}(T) \rightharpoonup  T]]></fr:tex>. We often call <fr:tex
display="inline"><![CDATA[\delta ]]></fr:tex> the cycle map.</fr:p><fr:p><fr:tex
display="inline"><![CDATA[\text {Leaf}(T)]]></fr:tex> is the set of elements in <fr:tex
display="inline"><![CDATA[T]]></fr:tex> which do not occur as a strict prefix of any other element in <fr:tex
display="inline"><![CDATA[T]]></fr:tex>. <fr:tex
display="inline"><![CDATA[\text {Inner}(T)]]></fr:tex> is the complement of this set with respect to <fr:tex
display="inline"><![CDATA[T]]></fr:tex>.</fr:p></fr:mainmatter><fr:backmatter /></fr:tree><fr:p>Our goal here is to work out what the correct notion of an "unfolding" of a cyclic tree is, in order to have a notion of unfolding cyclic proofs that is applicable to many different cyclic proof systems. This idea has already been referred to in the cyclic proof theory literature.</fr:p><fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>267</fr:anchor><fr:addr
type="machine">#254</fr:addr><fr:route>unstable-254.xml</fr:route><fr:title
text="Unfoldings in the literature">Unfoldings in the literature</fr:title><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>6</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="chrisjpurdy.xml"
addr="chrisjpurdy"
title="Chris Purdy">Chris Purdy</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>269</fr:anchor><fr:addr
type="user">not-0005</fr:addr><fr:route>not-0005.xml</fr:route><fr:title
text="Brotherston's notion of (un)folding">Brotherston's notion of (un)folding</fr:title><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>6</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="chrisjpurdy.xml"
addr="chrisjpurdy"
title="Chris Purdy">Chris Purdy</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p>Brotherston in <html:span
xmlns:html="http://www.w3.org/1999/xhtml"
class="link-reference"><fr:link
type="local"
href="brotherston2005.xml"
addr="brotherston2005"
title="Cyclic Proofs for First-Order Logic with Inductive Definitions">[brotherston2005]</fr:link></html:span> uses the idea of "folding up" the infinite representation of a cyclic proof to obtain equivalent cyclic proofs in cyclic normal form. The folding process essentially annotates a rule graph (that is a "subtree" of the infinte unfolding) with some cycles.</fr:p><fr:p>The notion of <fr:em>root-preserving surjective rule graph homomorphism</fr:em> is used to describe mappings between rule graphs that describe the same infinite proofs.</fr:p><fr:p>One problem with this (for our use-case) is that this notion <fr:em>does not consider cycles</fr:em> since they are not part of the rule graph data. Also as far as I can tell, the fact that this kind of homomorphism <fr:em>does not only operate at the level of cyclic tree structure</fr:em>, and deals with strict equality of sequents and rules (call these "tree annotations") means that it is not generalisable to systems where cycles may be formed up-to other conditions, e.g. substitution or weakening. The equitable partition approach looks like it would generalise the "equality of tree annotations" requirement of the homomorphism nicely.</fr:p><fr:p>In our use-case, we care about studying the unfoldings of a cyclic proof that are generated "bottom up", i.e. from an existing cyclic proof to a "larger" unfolding. This is in contrast to the "top down" approach - taking the unique infinite unfolding and folding it up to a smaller, finitely-presented proof in some way.</fr:p></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>271</fr:anchor><fr:addr
type="machine">#255</fr:addr><fr:route>unstable-255.xml</fr:route><fr:title
text="Wehr's infinite unfolding">Wehr's infinite unfolding</fr:title><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>6</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="chrisjpurdy.xml"
addr="chrisjpurdy"
title="Chris Purdy">Chris Purdy</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p>Wehr's notion of unfolding in his MSc thesis concerns the unfolding of a cyclic proof into its unique infinite unfolding. We need to be able to consider unfoldings of a cyclic proof into other finite presentations of the same infinite proof.</fr:p></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>273</fr:anchor><fr:addr
type="user">not-0006</fr:addr><fr:route>not-0006.xml</fr:route><fr:title
text="Sprenger and Dam's notion of unfolding">Sprenger and Dam's notion of unfolding</fr:title><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>6</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="chrisjpurdy.xml"
addr="chrisjpurdy"
title="Chris Purdy">Chris Purdy</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p>Sprenger and Dam's unfolding algorithm in <html:span
xmlns:html="http://www.w3.org/1999/xhtml"
class="link-reference"><fr:link
type="local"
href="sprengerdam2003.xml"
addr="sprengerdam2003"
title="On the Structure of Inductive Reasoning: Circular and Tree-Shaped Proofs in the μ-Calculus">[sprengerdam2003]</fr:link></html:span> was developed to find a <fr:em>tree-dischargeable</fr:em> version of a given cyclic proof.</fr:p><fr:p>The algorithm operates in the "bottom up" direction, taking an existing (injective) cyclic proof and unfolding it iteratively. It also does not refer to the sequents or rules associated with nodes in the cyclic proof, instead operating solely at the level of cyclic trees and keeping track of repeated nodes by tagging them with a <fr:em>copy number</fr:em>.</fr:p></fr:mainmatter><fr:backmatter /></fr:tree></fr:mainmatter><fr:backmatter /></fr:tree><fr:p><html:mark
xmlns:html="http://www.w3.org/1999/xhtml">TODO: Points to write-up:</html:mark>
  <fr:ul><fr:li>Talk about "obvious" notion of cyclic tree homomorphism, explain that it is too strict - we want to be able to consider maps between "unfoldings" of cyclic trees, as well as defining explicitly what an unfolding even is.</fr:li>
    <fr:li>Show how cyclic trees can be considered as particular kinds of multi-graph (by "collapsing" the cycles).</fr:li>
    <fr:li>Show that if a cyclic tree is in CNF, then you can recover it from the corresponding digraph (given from the previously mentioned translation) by calculating the minimum spanning aborescence (MSA) of that graph. If the cyclic tree is not in CNF, the MSA of the corresponding digraph is not unique - explore this point more perhaps.</fr:li>
    <fr:li>Introduce coverings of graphs, and fibrations and opfibrations of digraphs. Motivate the idea that these can be thought of as "unfoldings". Explain the idea of extending the MSA translation to a functor, and seeing how opfibrations define maps between cyclic trees.</fr:li>
    <fr:li>Show that this gives a nice notion of cyclic tree unfolding with some examples.</fr:li>
    <fr:li>Show that it doesn't encompass "change of companion" transformations, but equitable-partition preserving maps do.</fr:li></fr:ul>
  We might be able to relax the surjective requirement of the opfibrations to just a <fr:em>surjection on the set of inner nodes</fr:em> - this could potentially allow for "rolling unfoldings" to be included as an instance of a cyclic tree opfibration.</fr:p></fr:mainmatter><fr:backmatter /></fr:tree></fr:mainmatter><fr:backmatter /></fr:tree></fr:backmatter></fr:tree>