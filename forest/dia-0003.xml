<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="default.xsl"?>
<fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="true"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>397</fr:anchor><fr:addr
type="user">dia-0003</fr:addr><fr:route>dia-0003.xml</fr:route><fr:title
text="Diary: Monad container algebras">Diary: Monad container algebras</fr:title><fr:date><fr:year>2024</fr:year><fr:month>12</fr:month><fr:day>9</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="chrisjpurdy.xml"
addr="chrisjpurdy"
title="Chris Purdy">Chris Purdy</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p><fr:link
type="local"
href="dia-0002.xml"
addr="dia-0002"
title="Diary: UoN research visit, Nov 2024">Previous entry</fr:link>, <fr:link
type="local"
href="dia-0004.xml"
addr="dia-0004"
title="Diary: Relation between container distributive laws and matching pairs of monoids/Zappa-SzÃ©p products">Next entry</fr:link></fr:p><fr:p>This morning and yesterday evening I was trying to work out what monad containers correspond to algebraic theories. Since algebraic theories interpret finitary monads, I first worked out when monad containers are <fr:link
type="local"
href="lsd-0021.xml"
addr="lsd-0021"
title="Finitary container">finitary</fr:link>; lemma 1.7.3 from <fr:link
type="external"
href="https://www.irif.fr/~mellies/mpri/mpri-ens/articles/kock-notes-on-polynomial-functors.pdf">Joachim Kock's "Notes on Polynomial Functors"</fr:link> shows that this is exactly when the position sets are finite.</fr:p><fr:p>By considering the algebras for a monad conatiner, it became pretty clear that the algebraic theory corresponding to a monad container essentially has an operation for each shape which interact in accordance with the monad container equalities.
  <fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>290</fr:anchor><fr:addr
type="user">lsd-0019</fr:addr><fr:route>lsd-0019.xml</fr:route><fr:title
text="Monad container algebras">Monad container algebras</fr:title><fr:taxon>Definition</fr:taxon><fr:date><fr:year>2024</fr:year><fr:month>12</fr:month><fr:day>9</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="chrisjpurdy.xml"
addr="chrisjpurdy"
title="Chris Purdy">Chris Purdy</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p>An algebra for a <fr:link
type="local"
href="lsd-0002.xml"
addr="lsd-0002"
title="Monad container">monad container</fr:link> <fr:tex
display="inline"><![CDATA[(S \triangleright  P, \iota , \sigma , \text {pr})]]></fr:tex> is a pair <fr:tex
display="inline"><![CDATA[(A, \alpha )]]></fr:tex> of a set <fr:tex
display="inline"><![CDATA[A]]></fr:tex> and a map <fr:tex
display="inline"><![CDATA[\alpha  : \prod _{s : S} (P\ s \to  A) \to  A]]></fr:tex>, satisfying:
  <fr:tex
display="block"><![CDATA[     \begin {align*}       \alpha \ \iota \ (\lambda  \_ . a) &= a\\       \alpha \ (\sigma \ s\ f)\ (g \circ  \text {pr}) &= \alpha \ s\ (\lambda  p . \alpha \ (f\ p)\ (g\ p))      \end {align*}   ]]></fr:tex></fr:p></fr:mainmatter><fr:backmatter /></fr:tree>
  <fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>292</fr:anchor><fr:addr
type="user">lsd-0020</fr:addr><fr:route>lsd-0020.xml</fr:route><fr:title
text="Algebraic theories for cartesian monad containers">Algebraic theories for cartesian monad containers</fr:title><fr:taxon>Proposition</fr:taxon><fr:date><fr:year>2024</fr:year><fr:month>12</fr:month><fr:day>9</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="chrisjpurdy.xml"
addr="chrisjpurdy"
title="Chris Purdy">Chris Purdy</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p>The Set-functor interpretation of a <fr:link
type="local"
href="lsd-0021.xml"
addr="lsd-0021"
title="Finitary container">finitary</fr:link> <fr:link
type="local"
href="lsd-0009.xml"
addr="lsd-0009"
title="Cartesian monad container">cartesian</fr:link> monad container <fr:tex
display="inline"><![CDATA[(S \triangleright  P, \iota , \sigma )]]></fr:tex> is the same as that of the algebraic theory consisting of an operation <fr:tex
display="inline"><![CDATA[\lbrack \negthinspace \lbrack  s \rbrack \negthinspace \rbrack ]]></fr:tex> with arity <fr:tex
display="inline"><![CDATA[n \cong  P\ s]]></fr:tex> for each <fr:tex
display="inline"><![CDATA[s : S]]></fr:tex>, and the following equations:
  <fr:tex
display="block"><![CDATA[     \begin {align*}       \lbrack \negthinspace \lbrack  \iota  \rbrack \negthinspace \rbrack \ (\lbrack \negthinspace \lbrack  s \rbrack \negthinspace \rbrack \ \vec {t}) &= \lbrack \negthinspace \lbrack  s \rbrack \negthinspace \rbrack \ \vec {t}\\       \lbrack \negthinspace \lbrack  s \rbrack \negthinspace \rbrack \ (\lbrack \negthinspace \lbrack  \iota  \rbrack \negthinspace \rbrack \ t_1)\ \dots \ (\lbrack \negthinspace \lbrack  \iota  \rbrack \negthinspace \rbrack \ t_n) &= \lbrack \negthinspace \lbrack  s \rbrack \negthinspace \rbrack \ t_1\ \dots \ t_n\\       \lbrack \negthinspace \lbrack  s \rbrack \negthinspace \rbrack \ (\lbrack \negthinspace \lbrack  f(1) \rbrack \negthinspace \rbrack \ \vec {t_1})\ \dots \ (\lbrack \negthinspace \lbrack  f(n) \rbrack \negthinspace \rbrack \ \vec {t_n}) &= \lbrack \negthinspace \lbrack  \sigma \ s\ f \rbrack \negthinspace \rbrack \ \vec {t_1}\ \dots \ \vec {t_n}\\       \lbrack \negthinspace \lbrack  \sigma \ s\ f \rbrack \negthinspace \rbrack \ (\lbrack \negthinspace \lbrack  g(1)(1) \rbrack \negthinspace \rbrack \ \vec {t_{1,1}})\ \dots \ (\lbrack \negthinspace \lbrack  g(n)(m) \rbrack \negthinspace \rbrack \ \vec {t_{n,m}})& \\       = \lbrack \negthinspace \lbrack  s \rbrack \negthinspace \rbrack \ (\lbrack \negthinspace \lbrack  \sigma \ (f(1))\ (g(1)) \rbrack \negthinspace \rbrack \ &\vec {t_{1,1}}\ \dots \ \vec {t_{1,m}})\ \dots \ (\lbrack \negthinspace \lbrack  \sigma \ (f(n))\ (g(n)) \rbrack \negthinspace \rbrack \ \vec {t_{n,1}}\ \dots \ \vec {t_{n,m}})     \end {align*}   ]]></fr:tex></fr:p></fr:mainmatter><fr:backmatter /></fr:tree>
  I'm only considering cartesian monad containers for now, since their algebraic theories were much easier to describe - I'm not exactly sure how to phrase the equations in the non-cartesian case. For example, <fr:tex
display="inline"><![CDATA[\lbrack \negthinspace \lbrack  \iota  \rbrack \negthinspace \rbrack ]]></fr:tex> is not necessarily unary in that case, and <fr:tex
display="inline"><![CDATA[\lbrack \negthinspace \lbrack  \sigma \ s\ f \rbrack \negthinspace \rbrack ]]></fr:tex> may have fewer arguments than the sum of the arities of each <fr:tex
display="inline"><![CDATA[\lbrack \negthinspace \lbrack  f(i) \rbrack \negthinspace \rbrack ]]></fr:tex> - the resulting equations feel rather unnatural.oplus_</fr:p><fr:p>I think <html:span
xmlns:html="http://www.w3.org/1999/xhtml"
class="link-reference"><fr:link
type="local"
href="gambinokock2013.xml"
addr="gambinokock2013"
title="Polynomial functors and polynomial monads">[gambinokock2013]</fr:link></html:span> describes all of this in a more general form. A good reference describing filtered colimits is the <fr:link
type="external"
href="https://stacks.math.columbia.edu/tag/04AX">Stacks project</fr:link>.</fr:p><fr:p>An aside: I also found <fr:link
type="external"
href="https://www.cmu.edu/dietrich/philosophy/hott/slides/polytutorial.pdf">this presentation</fr:link> by Steve Awodey that describes the link between polynomial functors/monads and models of type theory, which probably links closely to the concept of <fr:tex
display="inline"><![CDATA[\Sigma ]]></fr:tex>-universes.</fr:p>
  <html:hr
xmlns:html="http://www.w3.org/1999/xhtml" />
<fr:p>EDIT (12/12/24): I realised that I was missing the associativity equation for the definition of the algebraic theory for a <fr:link
type="local"
href="lsd-0021.xml"
addr="lsd-0021"
title="Finitary container">finitary</fr:link> <fr:link
type="local"
href="lsd-0009.xml"
addr="lsd-0009"
title="Cartesian monad container">cartesian monad container</fr:link>, and in the process realised that <fr:em>finitary cartesian monad containers are exactly non-symmetric operads</fr:em>!</fr:p><fr:p>To show this, consider <fr:tex
display="inline"><![CDATA[(S \triangleright  P, \iota , \sigma )]]></fr:tex>. The set (or type) of operations for each <fr:tex
display="inline"><![CDATA[n : \mathbb {N}]]></fr:tex> is given by
  <fr:tex
display="block"><![CDATA[     n \mapsto  \sum _{s : S} |\negthinspace | P\ s \cong  n |\negthinspace |   ]]></fr:tex>
  where <fr:tex
display="inline"><![CDATA[\iota ]]></fr:tex> is the identity operation, and <fr:tex
display="inline"><![CDATA[\sigma ]]></fr:tex> is composition. All operations have finite arity by the finitary assumption on the monad container.</fr:p><fr:p>That monad containers were generalisations of non-symmetric operads (in this way) was already noticed by <fr:link
type="local"
href="tarmouustalu.xml"
addr="tarmouustalu"
title="Tarmo Uustalu">Tarmo Uustalu</fr:link> in <html:span
xmlns:html="http://www.w3.org/1999/xhtml"
class="link-reference"><fr:link
type="local"
href="uustalu2017.xml"
addr="uustalu2017"
title="Container Combinatorics: Monads and Lax Monoidal Functors">[uustalu2017]</fr:link></html:span>, but an explicit construction showing how they can be recovered was not given.</fr:p></fr:mainmatter><fr:backmatter><fr:tree
toc="false"
numbered="false"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:title
text="References">References</fr:title><fr:authors /></fr:frontmatter><fr:mainmatter><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="true"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>399</fr:anchor><fr:addr
type="user">uustalu2017</fr:addr><fr:route>uustalu2017.xml</fr:route><fr:title
text="Container Combinatorics: Monads and Lax Monoidal Functors">Container Combinatorics: Monads and Lax Monoidal Functors</fr:title><fr:taxon>Reference</fr:taxon><fr:date><fr:year>2017</fr:year></fr:date><fr:authors><fr:author><fr:link
type="local"
href="tarmouustalu.xml"
addr="tarmouustalu"
title="Tarmo Uustalu">Tarmo Uustalu</fr:link></fr:author></fr:authors><fr:meta
name="bibtex"><![CDATA[ @inproceedings{
  Uustalu_2017, 
  address={Cham}, 
  title={Container Combinatorics: Monads and Lax Monoidal Functors}, 
  ISBN={978-3-319-68953-1}, DOI={10.1007/978-3-319-68953-1_8},
  booktitle={Topics in Theoretical Computer Science}, 
  publisher={Springer International Publishing}, 
  author={Uustalu, Tarmo}, 
  editor={Mousavi, Mohammad Reza and Sgall, JiÅÃ­}, 
  year={2017}, 
  pages={91â105}, 
  language={en} 
 }]]></fr:meta></fr:frontmatter><fr:mainmatter /><fr:backmatter /></fr:tree><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="true"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>401</fr:anchor><fr:addr
type="user">gambinokock2013</fr:addr><fr:route>gambinokock2013.xml</fr:route><fr:title
text="Polynomial functors and polynomial monads">Polynomial functors and polynomial monads</fr:title><fr:taxon>Reference</fr:taxon><fr:date><fr:year>2013</fr:year></fr:date><fr:authors><fr:author>Nicola Gambino</fr:author><fr:author>Joachim Kock</fr:author></fr:authors><fr:meta
name="bibtex"><![CDATA[  @article{
    Gambino_Kock_2013, 
    title={Polynomial functors and polynomial monads}, 
    volume={154}, 
    ISSN={0305-0041, 1469-8064}, 
    DOI={10.1017/S0305004112000394}, 
    note={arXiv:0906.4931 [math]}, 
    number={1}, 
    journal={Mathematical Proceedings of the Cambridge Philosophical Society}, 
    author={Gambino, Nicola and Kock, Joachim}, 
    year={2013}, 
    month=jan, 
    pages={153â192} 
  }]]>
</fr:meta></fr:frontmatter><fr:mainmatter /><fr:backmatter /></fr:tree></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="false"
numbered="false"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:title
text="Backlinks">Backlinks</fr:title><fr:authors /></fr:frontmatter><fr:mainmatter><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="true"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>404</fr:anchor><fr:addr
type="user">dia-0004</fr:addr><fr:route>dia-0004.xml</fr:route><fr:title
text="Diary: Relation between container distributive laws and matching pairs of monoids/Zappa-SzÃ©p products">Diary: Relation between container distributive laws and matching pairs of monoids/Zappa-SzÃ©p products</fr:title><fr:date><fr:year>2024</fr:year><fr:month>12</fr:month><fr:day>11</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="chrisjpurdy.xml"
addr="chrisjpurdy"
title="Chris Purdy">Chris Purdy</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p><fr:link
type="local"
href="dia-0003.xml"
addr="dia-0003"
title="Diary: Monad container algebras">Previous entry</fr:link>, <fr:link
type="external"
href="dia-0005">Next entry</fr:link></fr:p>
  
  <fr:tree
toc="true"
numbered="true"
show-heading="false"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>279</fr:anchor><fr:addr
type="user">lsd-0024</fr:addr><fr:route>lsd-0024.xml</fr:route><fr:title
text="Relation between container distributive laws and matching pairs of monoids/Zappa-SzÃ©p products">Relation between container distributive laws and matching pairs of monoids/Zappa-SzÃ©p products</fr:title><fr:date><fr:year>2024</fr:year><fr:month>12</fr:month><fr:day>11</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="chrisjpurdy.xml"
addr="chrisjpurdy"
title="Chris Purdy">Chris Purdy</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p>As mentioned in <html:span
xmlns:html="http://www.w3.org/1999/xhtml"
class="link-reference"><fr:link
type="local"
href="ahmanuustalu2013.xml"
addr="ahmanuustalu2013"
title="Distributive laws of directed containers">[ahmanuustalu2013]</fr:link></html:span>, <fr:link
type="local"
href="lsd-0022.xml"
addr="lsd-0022"
title="Directed container distributive law">directed container distributive laws</fr:link> are generalisations of <fr:em>matching pairs of monoid actions</fr:em>. Further, composition of directed containers via a distributive law is a generalisation of the <fr:link
type="external"
href="https://en.wikipedia.org/wiki/Zappa%E2%80%93Sz%C3%A9p_product">Zappa-SzÃ©p product</fr:link> of two monoids. As mentioned in the paper, you can actually recover the definition of a matching pair by looking at distributive laws between representable <fr:link
type="local"
href="lsd-0023.xml"
addr="lsd-0023"
title="Directed container">directed containers</fr:link>.</fr:p><fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>281</fr:anchor><fr:addr
type="user">lsd-0025</fr:addr><fr:route>lsd-0025.xml</fr:route><fr:title
text="Directed container distributive law between representables">Directed container distributive law between representables</fr:title><fr:date><fr:year>2024</fr:year><fr:month>12</fr:month><fr:day>11</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="chrisjpurdy.xml"
addr="chrisjpurdy"
title="Chris Purdy">Chris Purdy</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p>Let <fr:tex
display="inline"><![CDATA[(1 \triangleright  \lambda  \_ . A, \downarrow ^A, o^A, \oplus ^A)]]></fr:tex> and <fr:tex
display="inline"><![CDATA[(1 \triangleright  \lambda  \_ . B, \downarrow ^B, o^B, \oplus ^B)]]></fr:tex> be representable <fr:link
type="local"
href="lsd-0023.xml"
addr="lsd-0023"
title="Directed container">directed containers</fr:link>. By specialising the equations of a <fr:link
type="local"
href="lsd-0022.xml"
addr="lsd-0022"
title="Directed container distributive law">directed container distributive law</fr:link> to these, all equations involving <fr:tex
display="inline"><![CDATA[u_2]]></fr:tex> disappear and we are left with:
  <fr:tex
display="block"><![CDATA[     \begin {align*}       v_1\ b\ o^A &= o^A\\       v_1\ o^B\ a &= a\\       v_1\ b\ (a \oplus ^A a') &= v_1\ b\ a \oplus ^A v_1\ (v_2\ b\ a)\ a'\\       v_1\ (b \oplus ^B b')\ a &= v_1\ b\ (v_1\ b'\ a)\\       v_2\ b\ o^A &= b\\       v_2\ o^B\ a &= o^B\\       v_2\ b\ (a \oplus ^A a') &= v_2\ (v_2\ b\ a)\ a'\\       v_2\ (b \oplus ^B b')\ a &= v_2\ b\ (v_1\ b' a) \oplus ^B v_2\ b'\ a     \end {align*}   ]]></fr:tex>
  which exhibit <fr:tex
display="inline"><![CDATA[v_1]]></fr:tex> and <fr:tex
display="inline"><![CDATA[v_2]]></fr:tex> as a matching pair of monoid maps between the monoids <fr:tex
display="inline"><![CDATA[(A , o^A, \oplus ^A)]]></fr:tex> and <fr:tex
display="inline"><![CDATA[(B, o^B, \oplus ^B)]]></fr:tex>. Hence, directed container distributive laws of this type are in bijection with matching pairs of actions for the relevant monoids.</fr:p></fr:mainmatter><fr:backmatter /></fr:tree><fr:p>As it turns out, <fr:link
type="local"
href="lsd-0008.xml"
addr="lsd-0008"
title="Monad container distributive law">monad container distributive laws</fr:link> are <fr:em>also</fr:em> a generalisation of matching pairs of monoid actions. This is a bit harder to see than in the directed container case, but as before we can recover the data and equations for a matching pair by specialising the distributive law to a particular type of monad container.</fr:p><fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>283</fr:anchor><fr:addr
type="user">lsd-0026</fr:addr><fr:route>lsd-0026.xml</fr:route><fr:title
text="Monad container distributive law between writers">Monad container distributive law between writers</fr:title><fr:date><fr:year>2024</fr:year><fr:month>12</fr:month><fr:day>11</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="chrisjpurdy.xml"
addr="chrisjpurdy"
title="Chris Purdy">Chris Purdy</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p>Let <fr:tex
display="inline"><![CDATA[(A \triangleright  \lambda  \_ . 1, \iota ^A, \sigma ^A, \text {pr}^A)]]></fr:tex> and <fr:tex
display="inline"><![CDATA[(B \triangleright  \lambda  \_ . 1, \iota ^B, \sigma ^B, \text {pr}^B)]]></fr:tex> be <fr:link
type="local"
href="lsd-0002.xml"
addr="lsd-0002"
title="Monad container">monad containers</fr:link>. By specialising the data and equations for a <fr:link
type="local"
href="lsd-0008.xml"
addr="lsd-0008"
title="Monad container distributive law">monad container distributive law</fr:link> to these, <fr:tex
display="inline"><![CDATA[v_1]]></fr:tex> and <fr:tex
display="inline"><![CDATA[v_2]]></fr:tex> become trivial (<fr:tex
display="inline"><![CDATA[\text {pr}^A]]></fr:tex> and <fr:tex
display="inline"><![CDATA[\text {pr}^B]]></fr:tex> are already trivial), and we are left with:
  
  <fr:tex
display="block"><![CDATA[     \begin {align*}            u_1\ \iota ^A\ (\lambda  \_ . b) &= b\\     u_1\ a\ (\lambda  \_ . \iota ^B) &= \iota ^B\\     u_1\ (\sigma ^A\ a\ (\lambda  \_ . a'))\ (\lambda  \_ . b) &= u_1\ a\ (\lambda  \_ . u_1\ a'\ (\lambda  \_ . b))\\     u_1\ a\ (\lambda  \_ . \sigma ^B\ b\ (\lambda  \_ . b')) &= \sigma ^B\ (u_1\ a\ (\lambda  \_ . b))\ (\lambda  \_ . u_1\ (u_2\ a\ (\lambda  \_ . b)\ *)\ (\lambda  \_ . b'))\\      u_2\ \iota ^A\ (\lambda  \_ . b)\ * &= \iota ^A\\     u_2\ a\ (\lambda  \_ . \iota ^B)\ * &= a\\     u_2\ (\sigma ^A\ a\ (\lambda  \_ . a'))\ (\lambda  \_ . b)\ * &= \sigma ^A\ (u_2\ a\ (\lambda  \_ . u_1\ a'\ (\lambda  \_ . b))\ *)\ (\lambda  \_ . u_2\ a'\ (\lambda  \_ . b')\ *)\\     u_2\ a\ (\lambda  \_ . \sigma ^B\ b\ (\lambda  \_ . b'))\ * &= u_2\ (u_2\ a\ (\lambda  \_ . b)\ *)\ (\lambda  \_ . b')\ *        \end {align*}   ]]></fr:tex>

  Bear in mind that, since all position sets are <fr:tex
display="inline"><![CDATA[1]]></fr:tex>, we do not lose generality by assuming constant all of the functions in the equations above. By defining:
  
  <fr:tex
display="block"><![CDATA[     \begin {align*}            \alpha \ a\ b := u_1\ a\ (\lambda  \_ . b)\\     \beta \ a\ b := u_2\ a\ (\lambda  \_ . b)\ *\\     a \otimes ^A a' := \sigma ^A\ a\ (\lambda  \_ . a')\\     b \otimes ^B b' := \sigma ^B\ b\ (\lambda  \_ . b')        \end {align*}   ]]></fr:tex>

  we can rewrite these equations as:
  
  <fr:tex
display="block"><![CDATA[     \begin {align*}            \alpha \ \iota ^A\ b &= b\\     \alpha \ a\ \iota ^B &= \iota ^B\\     \alpha \ (a \otimes ^A a')\ b &= \alpha \ a\ (\alpha \ a'\ b)\\     \alpha \ a\ (b \otimes ^B b') &= (\alpha \ a\ b) \otimes ^B (\alpha \ (\beta \ a\ b)\ b')\\      \beta \ \iota ^A\ b &= \iota ^A\\     \beta \ a\ \iota ^B &= a\\     \beta \ (a \otimes ^A a')\ b &= (\beta \ a\ (\alpha \ a'\ b)) \otimes ^A (\beta \ a'\ b')\\     \beta \ a\ (b \otimes ^B b') &= \beta \ (\beta \ a\ b)\ b'        \end {align*}   ]]></fr:tex>

  These are exactly the equations exhibiting <fr:tex
display="inline"><![CDATA[\alpha ]]></fr:tex> and <fr:tex
display="inline"><![CDATA[\beta ]]></fr:tex> as a matching pair of monoid actions between <fr:tex
display="inline"><![CDATA[(A, \otimes ^A, \iota ^A)]]></fr:tex> and <fr:tex
display="inline"><![CDATA[(B , \otimes ^B, \iota ^B)]]></fr:tex>. Therefore, monad container distributive laws of this type are in bijection with matching pairs of actions for the relevant monoids.</fr:p></fr:mainmatter><fr:backmatter /></fr:tree><fr:p>As shown, both of these types of distributive law are generalisations of matching pairs of monoid actions, each in a slightly different way. For directed containers the generalisation is "in the direction of the shapes", and for monad containers the generalisation is "in the direction of the positions".</fr:p></fr:mainmatter><fr:backmatter /></fr:tree>
</fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="true"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>406</fr:anchor><fr:addr
type="user">dia-0002</fr:addr><fr:route>dia-0002.xml</fr:route><fr:title
text="Diary: UoN research visit, Nov 2024">Diary: UoN research visit, Nov 2024</fr:title><fr:date><fr:year>2024</fr:year><fr:month>11</fr:month><fr:day>28</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="chrisjpurdy.xml"
addr="chrisjpurdy"
title="Chris Purdy">Chris Purdy</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p><fr:link
type="local"
href="dia-0001.xml"
addr="dia-0001"
title="Research diary">Previous entry</fr:link>, <fr:link
type="local"
href="dia-0003.xml"
addr="dia-0003"
title="Diary: Monad container algebras">Next entry</fr:link></fr:p><fr:p>Earlier this week <fr:link
type="local"
href="stefaniadamato.xml"
addr="stefaniadamato"
title="Stefania Damato">Stef</fr:link> and I were working on the monad container distributive law project. We had a very insightful meeting with Dan Marsden who mentioned (among other things) that we should look for applications for our characterisation. Things to try:
  <fr:ol><fr:li>Find characterisations for tighter classes of monad containers (i.e. <fr:link
type="local"
href="lsd-0003.xml"
addr="lsd-0003"
title="Commutative monad containers">commutative</fr:link>, <fr:link
type="local"
href="lsd-0004.xml"
addr="lsd-0004"
title="All affine monad containers are representable">affine</fr:link>, relevant) and see if this simplifies the distributive law. We have already characterised distributive laws for cartesian monad containers for example.</fr:li>
    <fr:li>Prove more than just mere existence of distributive laws - use the characterisation to find exactly how many there are for a given pair of monad containers.</fr:li>
    <fr:li>Over-approximate distributive law requirements to have an easier time with the above. For example, we could consider when the position map <fr:tex
display="inline"><![CDATA[v]]></fr:tex> is just <fr:tex
display="inline"><![CDATA[\langle  \pi _2 , \pi _1 \rangle ]]></fr:tex>, which often seems to be the case in simpler examples.</fr:li>
    <fr:li>Find which algebraic theories correspond to container monads, to tie our work to Maaike Zwart and Dan's work on distributive laws for algebraic theories.</fr:li></fr:ol></fr:p></fr:mainmatter><fr:backmatter /></fr:tree></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="false"
numbered="false"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:title
text="Related">Related</fr:title><fr:authors /></fr:frontmatter><fr:mainmatter><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="true"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>408</fr:anchor><fr:addr
type="user">dia-0004</fr:addr><fr:route>dia-0004.xml</fr:route><fr:title
text="Diary: Relation between container distributive laws and matching pairs of monoids/Zappa-SzÃ©p products">Diary: Relation between container distributive laws and matching pairs of monoids/Zappa-SzÃ©p products</fr:title><fr:date><fr:year>2024</fr:year><fr:month>12</fr:month><fr:day>11</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="chrisjpurdy.xml"
addr="chrisjpurdy"
title="Chris Purdy">Chris Purdy</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p><fr:link
type="local"
href="dia-0003.xml"
addr="dia-0003"
title="Diary: Monad container algebras">Previous entry</fr:link>, <fr:link
type="external"
href="dia-0005">Next entry</fr:link></fr:p>
  
  <fr:tree
toc="true"
numbered="true"
show-heading="false"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>279</fr:anchor><fr:addr
type="user">lsd-0024</fr:addr><fr:route>lsd-0024.xml</fr:route><fr:title
text="Relation between container distributive laws and matching pairs of monoids/Zappa-SzÃ©p products">Relation between container distributive laws and matching pairs of monoids/Zappa-SzÃ©p products</fr:title><fr:date><fr:year>2024</fr:year><fr:month>12</fr:month><fr:day>11</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="chrisjpurdy.xml"
addr="chrisjpurdy"
title="Chris Purdy">Chris Purdy</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p>As mentioned in <html:span
xmlns:html="http://www.w3.org/1999/xhtml"
class="link-reference"><fr:link
type="local"
href="ahmanuustalu2013.xml"
addr="ahmanuustalu2013"
title="Distributive laws of directed containers">[ahmanuustalu2013]</fr:link></html:span>, <fr:link
type="local"
href="lsd-0022.xml"
addr="lsd-0022"
title="Directed container distributive law">directed container distributive laws</fr:link> are generalisations of <fr:em>matching pairs of monoid actions</fr:em>. Further, composition of directed containers via a distributive law is a generalisation of the <fr:link
type="external"
href="https://en.wikipedia.org/wiki/Zappa%E2%80%93Sz%C3%A9p_product">Zappa-SzÃ©p product</fr:link> of two monoids. As mentioned in the paper, you can actually recover the definition of a matching pair by looking at distributive laws between representable <fr:link
type="local"
href="lsd-0023.xml"
addr="lsd-0023"
title="Directed container">directed containers</fr:link>.</fr:p><fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>281</fr:anchor><fr:addr
type="user">lsd-0025</fr:addr><fr:route>lsd-0025.xml</fr:route><fr:title
text="Directed container distributive law between representables">Directed container distributive law between representables</fr:title><fr:date><fr:year>2024</fr:year><fr:month>12</fr:month><fr:day>11</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="chrisjpurdy.xml"
addr="chrisjpurdy"
title="Chris Purdy">Chris Purdy</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p>Let <fr:tex
display="inline"><![CDATA[(1 \triangleright  \lambda  \_ . A, \downarrow ^A, o^A, \oplus ^A)]]></fr:tex> and <fr:tex
display="inline"><![CDATA[(1 \triangleright  \lambda  \_ . B, \downarrow ^B, o^B, \oplus ^B)]]></fr:tex> be representable <fr:link
type="local"
href="lsd-0023.xml"
addr="lsd-0023"
title="Directed container">directed containers</fr:link>. By specialising the equations of a <fr:link
type="local"
href="lsd-0022.xml"
addr="lsd-0022"
title="Directed container distributive law">directed container distributive law</fr:link> to these, all equations involving <fr:tex
display="inline"><![CDATA[u_2]]></fr:tex> disappear and we are left with:
  <fr:tex
display="block"><![CDATA[     \begin {align*}       v_1\ b\ o^A &= o^A\\       v_1\ o^B\ a &= a\\       v_1\ b\ (a \oplus ^A a') &= v_1\ b\ a \oplus ^A v_1\ (v_2\ b\ a)\ a'\\       v_1\ (b \oplus ^B b')\ a &= v_1\ b\ (v_1\ b'\ a)\\       v_2\ b\ o^A &= b\\       v_2\ o^B\ a &= o^B\\       v_2\ b\ (a \oplus ^A a') &= v_2\ (v_2\ b\ a)\ a'\\       v_2\ (b \oplus ^B b')\ a &= v_2\ b\ (v_1\ b' a) \oplus ^B v_2\ b'\ a     \end {align*}   ]]></fr:tex>
  which exhibit <fr:tex
display="inline"><![CDATA[v_1]]></fr:tex> and <fr:tex
display="inline"><![CDATA[v_2]]></fr:tex> as a matching pair of monoid maps between the monoids <fr:tex
display="inline"><![CDATA[(A , o^A, \oplus ^A)]]></fr:tex> and <fr:tex
display="inline"><![CDATA[(B, o^B, \oplus ^B)]]></fr:tex>. Hence, directed container distributive laws of this type are in bijection with matching pairs of actions for the relevant monoids.</fr:p></fr:mainmatter><fr:backmatter /></fr:tree><fr:p>As it turns out, <fr:link
type="local"
href="lsd-0008.xml"
addr="lsd-0008"
title="Monad container distributive law">monad container distributive laws</fr:link> are <fr:em>also</fr:em> a generalisation of matching pairs of monoid actions. This is a bit harder to see than in the directed container case, but as before we can recover the data and equations for a matching pair by specialising the distributive law to a particular type of monad container.</fr:p><fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>283</fr:anchor><fr:addr
type="user">lsd-0026</fr:addr><fr:route>lsd-0026.xml</fr:route><fr:title
text="Monad container distributive law between writers">Monad container distributive law between writers</fr:title><fr:date><fr:year>2024</fr:year><fr:month>12</fr:month><fr:day>11</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="chrisjpurdy.xml"
addr="chrisjpurdy"
title="Chris Purdy">Chris Purdy</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p>Let <fr:tex
display="inline"><![CDATA[(A \triangleright  \lambda  \_ . 1, \iota ^A, \sigma ^A, \text {pr}^A)]]></fr:tex> and <fr:tex
display="inline"><![CDATA[(B \triangleright  \lambda  \_ . 1, \iota ^B, \sigma ^B, \text {pr}^B)]]></fr:tex> be <fr:link
type="local"
href="lsd-0002.xml"
addr="lsd-0002"
title="Monad container">monad containers</fr:link>. By specialising the data and equations for a <fr:link
type="local"
href="lsd-0008.xml"
addr="lsd-0008"
title="Monad container distributive law">monad container distributive law</fr:link> to these, <fr:tex
display="inline"><![CDATA[v_1]]></fr:tex> and <fr:tex
display="inline"><![CDATA[v_2]]></fr:tex> become trivial (<fr:tex
display="inline"><![CDATA[\text {pr}^A]]></fr:tex> and <fr:tex
display="inline"><![CDATA[\text {pr}^B]]></fr:tex> are already trivial), and we are left with:
  
  <fr:tex
display="block"><![CDATA[     \begin {align*}            u_1\ \iota ^A\ (\lambda  \_ . b) &= b\\     u_1\ a\ (\lambda  \_ . \iota ^B) &= \iota ^B\\     u_1\ (\sigma ^A\ a\ (\lambda  \_ . a'))\ (\lambda  \_ . b) &= u_1\ a\ (\lambda  \_ . u_1\ a'\ (\lambda  \_ . b))\\     u_1\ a\ (\lambda  \_ . \sigma ^B\ b\ (\lambda  \_ . b')) &= \sigma ^B\ (u_1\ a\ (\lambda  \_ . b))\ (\lambda  \_ . u_1\ (u_2\ a\ (\lambda  \_ . b)\ *)\ (\lambda  \_ . b'))\\      u_2\ \iota ^A\ (\lambda  \_ . b)\ * &= \iota ^A\\     u_2\ a\ (\lambda  \_ . \iota ^B)\ * &= a\\     u_2\ (\sigma ^A\ a\ (\lambda  \_ . a'))\ (\lambda  \_ . b)\ * &= \sigma ^A\ (u_2\ a\ (\lambda  \_ . u_1\ a'\ (\lambda  \_ . b))\ *)\ (\lambda  \_ . u_2\ a'\ (\lambda  \_ . b')\ *)\\     u_2\ a\ (\lambda  \_ . \sigma ^B\ b\ (\lambda  \_ . b'))\ * &= u_2\ (u_2\ a\ (\lambda  \_ . b)\ *)\ (\lambda  \_ . b')\ *        \end {align*}   ]]></fr:tex>

  Bear in mind that, since all position sets are <fr:tex
display="inline"><![CDATA[1]]></fr:tex>, we do not lose generality by assuming constant all of the functions in the equations above. By defining:
  
  <fr:tex
display="block"><![CDATA[     \begin {align*}            \alpha \ a\ b := u_1\ a\ (\lambda  \_ . b)\\     \beta \ a\ b := u_2\ a\ (\lambda  \_ . b)\ *\\     a \otimes ^A a' := \sigma ^A\ a\ (\lambda  \_ . a')\\     b \otimes ^B b' := \sigma ^B\ b\ (\lambda  \_ . b')        \end {align*}   ]]></fr:tex>

  we can rewrite these equations as:
  
  <fr:tex
display="block"><![CDATA[     \begin {align*}            \alpha \ \iota ^A\ b &= b\\     \alpha \ a\ \iota ^B &= \iota ^B\\     \alpha \ (a \otimes ^A a')\ b &= \alpha \ a\ (\alpha \ a'\ b)\\     \alpha \ a\ (b \otimes ^B b') &= (\alpha \ a\ b) \otimes ^B (\alpha \ (\beta \ a\ b)\ b')\\      \beta \ \iota ^A\ b &= \iota ^A\\     \beta \ a\ \iota ^B &= a\\     \beta \ (a \otimes ^A a')\ b &= (\beta \ a\ (\alpha \ a'\ b)) \otimes ^A (\beta \ a'\ b')\\     \beta \ a\ (b \otimes ^B b') &= \beta \ (\beta \ a\ b)\ b'        \end {align*}   ]]></fr:tex>

  These are exactly the equations exhibiting <fr:tex
display="inline"><![CDATA[\alpha ]]></fr:tex> and <fr:tex
display="inline"><![CDATA[\beta ]]></fr:tex> as a matching pair of monoid actions between <fr:tex
display="inline"><![CDATA[(A, \otimes ^A, \iota ^A)]]></fr:tex> and <fr:tex
display="inline"><![CDATA[(B , \otimes ^B, \iota ^B)]]></fr:tex>. Therefore, monad container distributive laws of this type are in bijection with matching pairs of actions for the relevant monoids.</fr:p></fr:mainmatter><fr:backmatter /></fr:tree><fr:p>As shown, both of these types of distributive law are generalisations of matching pairs of monoid actions, each in a slightly different way. For directed containers the generalisation is "in the direction of the shapes", and for monad containers the generalisation is "in the direction of the positions".</fr:p></fr:mainmatter><fr:backmatter /></fr:tree>
</fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="true"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>410</fr:anchor><fr:addr
type="user">lsd-0021</fr:addr><fr:route>lsd-0021.xml</fr:route><fr:title
text="Finitary container">Finitary container</fr:title><fr:taxon>Definition</fr:taxon><fr:date><fr:year>2024</fr:year><fr:month>12</fr:month><fr:day>9</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="chrisjpurdy.xml"
addr="chrisjpurdy"
title="Chris Purdy">Chris Purdy</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p>A container <fr:tex
display="inline"><![CDATA[S \triangleright  P]]></fr:tex> is finitary when its extension functor is finitary (preserves filtered colimits). A monad container is finitary when the underlying container is.
  <fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>387</fr:anchor><fr:addr
type="machine">#245</fr:addr><fr:route>unstable-245.xml</fr:route><fr:taxon>Proposition</fr:taxon><fr:date><fr:year>2024</fr:year><fr:month>12</fr:month><fr:day>9</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="chrisjpurdy.xml"
addr="chrisjpurdy"
title="Chris Purdy">Chris Purdy</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p>A container is finitary if and only if for all <fr:tex
display="inline"><![CDATA[s : S]]></fr:tex>, the set <fr:tex
display="inline"><![CDATA[P\ s]]></fr:tex> is isomorphic to some finite cardinal. 
      <html:mark
xmlns:html="http://www.w3.org/1999/xhtml">TODO: reference Kock here</html:mark></fr:p></fr:mainmatter><fr:backmatter /></fr:tree></fr:p></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="true"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>412</fr:anchor><fr:addr
type="user">lsd-0009</fr:addr><fr:route>lsd-0009.xml</fr:route><fr:title
text="Cartesian monad container">Cartesian monad container</fr:title><fr:taxon>Definition</fr:taxon><fr:date><fr:year>2024</fr:year><fr:month>12</fr:month><fr:day>2</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="chrisjpurdy.xml"
addr="chrisjpurdy"
title="Chris Purdy">Chris Purdy</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p>Let <fr:tex
display="inline"><![CDATA[(S \triangleright  P, \iota , \sigma , \text {pr})]]></fr:tex> be a <fr:link
type="local"
href="lsd-0002.xml"
addr="lsd-0002"
title="Monad container">monad containers</fr:link>. It is cartesian
  iff <fr:tex
display="inline"><![CDATA[P\ \iota  \cong  1]]></fr:tex> and <fr:tex
display="inline"><![CDATA[\text {pr}]]></fr:tex> is an isomorphism. This is equivalent to saying that the
  extension of the monad container is a cartesian monad (container functors always preserve pullbacks).</fr:p><fr:p>These can also be seen as proper <fr:tex
display="inline"><![CDATA[(1,\Sigma )]]></fr:tex> type universes (Tarski-style).</fr:p></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="true"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>414</fr:anchor><fr:addr
type="user">dia-0002</fr:addr><fr:route>dia-0002.xml</fr:route><fr:title
text="Diary: UoN research visit, Nov 2024">Diary: UoN research visit, Nov 2024</fr:title><fr:date><fr:year>2024</fr:year><fr:month>11</fr:month><fr:day>28</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="chrisjpurdy.xml"
addr="chrisjpurdy"
title="Chris Purdy">Chris Purdy</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p><fr:link
type="local"
href="dia-0001.xml"
addr="dia-0001"
title="Research diary">Previous entry</fr:link>, <fr:link
type="local"
href="dia-0003.xml"
addr="dia-0003"
title="Diary: Monad container algebras">Next entry</fr:link></fr:p><fr:p>Earlier this week <fr:link
type="local"
href="stefaniadamato.xml"
addr="stefaniadamato"
title="Stefania Damato">Stef</fr:link> and I were working on the monad container distributive law project. We had a very insightful meeting with Dan Marsden who mentioned (among other things) that we should look for applications for our characterisation. Things to try:
  <fr:ol><fr:li>Find characterisations for tighter classes of monad containers (i.e. <fr:link
type="local"
href="lsd-0003.xml"
addr="lsd-0003"
title="Commutative monad containers">commutative</fr:link>, <fr:link
type="local"
href="lsd-0004.xml"
addr="lsd-0004"
title="All affine monad containers are representable">affine</fr:link>, relevant) and see if this simplifies the distributive law. We have already characterised distributive laws for cartesian monad containers for example.</fr:li>
    <fr:li>Prove more than just mere existence of distributive laws - use the characterisation to find exactly how many there are for a given pair of monad containers.</fr:li>
    <fr:li>Over-approximate distributive law requirements to have an easier time with the above. For example, we could consider when the position map <fr:tex
display="inline"><![CDATA[v]]></fr:tex> is just <fr:tex
display="inline"><![CDATA[\langle  \pi _2 , \pi _1 \rangle ]]></fr:tex>, which often seems to be the case in simpler examples.</fr:li>
    <fr:li>Find which algebraic theories correspond to container monads, to tie our work to Maaike Zwart and Dan's work on distributive laws for algebraic theories.</fr:li></fr:ol></fr:p></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="true"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>416</fr:anchor><fr:addr
type="user">tarmouustalu</fr:addr><fr:route>tarmouustalu.xml</fr:route><fr:title
text="Tarmo Uustalu">Tarmo Uustalu</fr:title><fr:taxon>Person</fr:taxon><fr:authors /><fr:meta
name="external">https://cs.ioc.ee/~tarmo/</fr:meta><fr:meta
name="institution">Reykjavik University</fr:meta><fr:meta
name="orcid">0000-0002-1297-0579</fr:meta></fr:frontmatter><fr:mainmatter><fr:p>Professor at Reykjavik University.</fr:p></fr:mainmatter><fr:backmatter /></fr:tree></fr:mainmatter><fr:backmatter /></fr:tree></fr:backmatter></fr:tree>